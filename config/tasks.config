process {

    withName: NANOPLOT {
        queue = { ontfile.toList().size() > 1 ?
            (5*((ontfile.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(ontfile.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {ontfile.toList().size() > 1 ?
            25.B * (ontfile.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
            25.B * (ontfile.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { ontfile.toList().size() > 1 ?
                    5.ms * ((ontfile.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (ontfile.target.size() * task.attempt / 1000 + 125000)}

        cpus = 2
    }


    withName: MINIMAP2_ALIGN {
        queue = { reads.toList().size() > 1 ?
            (25*((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (25*(reads.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {reads.toList().size() > 1 ?
                    50.B * ((reads.target.sum{it.size()} + fasta.target.size()) * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    50.B * ((reads.target.size() + fasta.target.size()) * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { reads.toList().size() > 1 ?
                    25.ms * ((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    25.ms * (reads.target.size() * task.attempt / 1000 + 125000)}

        cpus = { 3*(reads.toList().size()) }

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = '-uf -k14'
    }


    withName: SAMTOOLS_INDEX {
        queue = { input.toList().size() > 1 ?
            (5*((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(input.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {input.toList().size() > 1 ?
                    5.B * (input.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (input.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { input.toList().size() > 1 ?
                    5.ms * ((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (input.target.size() * task.attempt / 1000 + 125000)}
    }


     withName: SAMTOOLS_VIEW {
        queue = { input.toList().size() > 1 ?
            (5*((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(input.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {input.toList().size() > 1 ?
                    5.B * (input.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (input.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { input.toList().size() > 1 ?
                    5.ms * ((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (input.target.size() * task.attempt / 1000 + 125000)}

        ext.args = "--output-fmt sam"
        ext.prefix = {"${meta.id}_SAM"}
    }

    withName: SAMTOOLS_STATS {
        queue = { input.toList().size() > 1 ?
            (5*((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(input.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {input.toList().size() > 1 ?
                    5.B * (input.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (input.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { input.toList().size() > 1 ?
                    5.ms * ((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (input.target.size() * task.attempt / 1000 + 125000)}
    }


    withName: ALIGN_STATS {
        queue = { input.toList().size() > 1 ?
            (5*((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(input.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {input.toList().size() > 1 ?
                    5.B * (input.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (input.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { input.toList().size() > 1 ?
                    5.ms * ((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (input.target.size() * task.attempt / 1000 + 125000)}

        publishDir = {"$baseDir/output/align_stats"}
    }


    withName: SUBREAD_FEATURECOUNTS {
        queue = { bams.toList().size() > 1 ?
            (5*((bams.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(bams.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {bams.toList().size() > 1 ?
                    5.B * (bams.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (bams.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { bams.toList().size() > 1 ?
                    5.ms * ((bams.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (bams.target.size() * task.attempt / 1000 + 125000)}
    }

    
    withName: FLAIR_BAMTOBED {
        queue = { bam.toList().size() > 1 ?
            (5*((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(bam.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {bam.toList().size() > 1 ?
                    5.B * (bam.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (bam.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { bam.toList().size() > 1 ?
                    5.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (bam.target.size() * task.attempt / 1000 + 125000)}
    }

    withName: FLAIR_CORRECT {
        queue = { bed.toList().size() > 1 ?
            (5*((bed.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(bed.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {bed.toList().size() > 1 ?
                    5.B * (bed.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (bed.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { bed.toList().size() > 1 ?
                    5.ms * ((bed.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (bed.target.size() * task.attempt / 1000 + 125000)}

        ext.args = '--window 10'
    }

    withName: FLAIR_CONCATENATE {
        queue = { bed.toList().size() > 1 ?
            (5*((bed.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(bed.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {bed.toList().size() > 1 ?
                    5.B * (bed.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (bed.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { bed.toList().size() > 1 ?
                    5.ms * ((bed.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (bed.target.size() * task.attempt / 1000 + 125000)}
    }

    withName: FLAIR_COLLAPSE {
        queue = { reads.toList().size() > 1 ?
            (25*((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (25*(reads.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {reads.toList().size() > 1 ?
                    25.B * (reads.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    25.B * (reads.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { reads.toList().size() > 1 ?
                    25.ms * ((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    25.ms * (reads.target.size() * task.attempt / 1000 + 125000)}

        ext.args = '--window 100 --quality 1 --support 3 --max_ends 2'
    }

    withName: OXFORD_FILTER {
        queue = { bam.toList().size() > 1 ?
            (5*((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(bam.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {bam.toList().size() > 1 ?
                    5.B * (bam.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (bam.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { bam.toList().size() > 1 ?
                    5.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (bam.target.size() * task.attempt / 1000 + 125000)}

        ext.mapping_quality = '40'
        ext.poly_context = '24'
        ext.max_poly_run = '8'

        cpus = 1
    }

    withName: STRINGTIE_STRINGTIE {
        queue = { bam.toList().size() > 1 ?
            (5*((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(bam.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {bam.toList().size() > 1 ?
                    5.B * (bam.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (bam.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { bam.toList().size() > 1 ?
                    5.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (bam.target.size() * task.attempt / 1000 + 125000)}

        ext.args = ' -c 1 -f 0.01 '
    }

    withName: STRINGTIE_MERGE {
        queue = { stringtie_gtf.toList().size() > 1 ?
            (5*((stringtie_gtf.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(stringtie_gtf.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {stringtie_gtf.toList().size() > 1 ?
                    5.B * (stringtie_gtf.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (stringtie_gtf.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { stringtie_gtf.toList().size() > 1 ?
                    5.ms * ((stringtie_gtf.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (stringtie_gtf.target.size() * task.attempt / 1000 + 125000)}

        ext.args  = '-m 50 -c 0 -f 0.01'
    }

    withName: GET_SJS_FROM_GTF {
        queue = { referenceFasta.toList().size() > 1 ?
            (10*((referenceFasta.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (10*(referenceFasta.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {referenceFasta.toList().size() > 1 ?
                    25.B * (referenceFasta.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    25.B * (referenceFasta.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { referenceFasta.toList().size() > 1 ?
                    10.ms * ((referenceFasta.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    10.ms * (referenceFasta.target.size() * task.attempt / 1000 + 125000)}

    }

    withName: TRANSCRIPTCLEAN {
        queue = { sam.toList().size() > 1 ?
            (16*(((sam.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (16*((sam.target.size()  + fasta.target.size()) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {sam.toList().size() > 1 ?
                    5.B * ((sam.target.sum{it.size()} + fasta.target.size()) * (task.attempt * 0.1 + 0.9) + (1024*1024*1024)) :
                    5.B * ((sam.target.size()  + fasta.target.size())* (task.attempt * 0.1 + 0.9) + (1024*1024*1024))}

        time = { sam.toList().size() > 1 ?
                    16.ms * (((sam.target.stream().reduce(0, (x, y) -> x + y.size()))  + fasta.target.size()) * task.attempt / 1000 + 125000) :
                    16.ms * ((sam.target.size()  + fasta.target.size()) * task.attempt / 1000 + 125000)}


        cpus = 2

	ext.args = ''

	errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

	
    }

    withName: TALONLABELREADs {
        queue = { sam.toList().size() > 1 ?
            (5*((sam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(sam.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {sam.toList().size() > 1 ?
                    5.B * (sam.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (sam.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { sam.toList().size() > 1 ?
                    5.ms * ((sam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (sam.target.size() * task.attempt / 1000 + 125000)}

        cpus = 10

    }

    withName: SET_CONFIG {
        queue = { gtf.toList().size() > 1 ?
            (5*((gtf.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
            (5*(gtf.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {gtf.toList().size() > 1 ?
                    5.B * (gtf.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (gtf.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { gtf.toList().size() > 1 ?
                    5.ms * ((gtf.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (gtf.target.size() * task.attempt / 1000 + 125000)}

    }



}
